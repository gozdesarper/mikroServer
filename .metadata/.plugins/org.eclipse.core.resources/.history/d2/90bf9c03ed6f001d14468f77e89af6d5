package com.kodlamaio.inventoryServer.business.concretes;


import java.util.List;
import java.util.stream.Collectors;

import org.hibernate.validator.internal.util.logging.Messages;
import org.springframework.stereotype.Service;

import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;
import com.kodlamaio.inventoryServer.business.abstracts.BrandService;
import com.kodlamaio.inventoryServer.business.request.create.CreateBrandRequest;
import com.kodlamaio.inventoryServer.business.request.update.UpdateBrandRequest;
import com.kodlamaio.inventoryServer.business.responses.create.CreateBrandResponse;
import com.kodlamaio.inventoryServer.business.responses.get.GetAllBrandsResponse;
import com.kodlamaio.inventoryServer.business.responses.update.UpdateBrandResponse;
import com.kodlamaio.inventoryServer.dataAccess.BrandRepository;
import com.kodlamaio.inventoryServer.entities.Brand;

import lombok.AllArgsConstructor;
@Service
@AllArgsConstructor
public class BrandManager  implements BrandService{
	private BrandRepository brandRepository;
	private ModelMapperService modelMapperService;

	@Override
	public List<GetAllBrandsResponse> getAll() {
		List<Brand> brands = this.brandRepository.findAll();
		List<GetAllBrandsResponse> responses = 
			brands.stream().map(brand -> 
			this.modelMapperService.forResponse().map(brand, GetAllBrandsResponse.class))
			.collect(Collectors.toList());
			return responses;
		}

	@Override
	public CreateBrandResponse add(CreateBrandRequest createBrandRequest) {
		Brand brand = this.modelMapperService.forRequest().map(createBrandRequest, Brand.class);
		this.brandRepository.save(brand);
		CreateBrandResponse createBrandResponse = this.modelMapperService.forResponse().map(brand, CreateBrandResponse.class);
		return createBrandResponse;
	}

	@Override
	public UpdateBrandResponse update(UpdateBrandRequest updateBrandRequest) {
		checkIfExistBrandId(updateBrandRequest)
		Brand brand = this.modelMapperService.forRequest().map(updateBrandRequest, Brand.class);
		this.brandRepository.save(brand);
		UpdateBrandResponse response = this.modelMapperService.forResponse().map(brand, UpdateBrandResponse.class);
		return response;
	}

	@Override
	public void delete(int id) {
	brandRepository.deleteById(id);
		
	}
	private void checkIfExistBrandId (int id) {
		if(!brandRepository.existsById(id)) {
			throw new BusinessException("User not found);
		}
	}

	
}

